//
//  EventDetailViewController.swift
//  zenigame_viewer
//
//  Created by 笹野駿 on 2017/06/22.
//  Copyright © 2017年 BANDAI NAMCO Entertainment Inc. All rights reserved.
//

import UIKit

class EventDetailViewController: UIViewController {

    @IBOutlet private weak var contentView: UIView!
    @IBOutlet private weak var eventBanner: UILabel!
    @IBOutlet private weak var startTimeLabel: UILabel!
    @IBOutlet private weak var audienceNumberLabel: UILabel!
    @IBOutlet private weak var remainLabel: UILabel!
    @IBOutlet private weak var periodLabel: UILabel!
    @IBOutlet private weak var scrollView: UIScrollView!
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = UIColor.white
        let navbar = UINavigationBar()
        self.view.addSubview(navbar)
        navbar.autoPinEdge(toSuperviewEdge: .top)
        navbar.autoPinEdge(toSuperviewEdge: .left)
        navbar.autoPinEdge(toSuperviewEdge: .right)
        navbar.autoSetDimension(.height, toSize: 64)
        navigationItem.leftBarButtonItem = UIBarButtonItem(title: "＜", style: .plain, target: self, action: #selector(EventDetailViewController.back))
        navigationItem.title = "イベント詳細"
        navbar.pushItem(navigationItem, animated: true)

        contentView.layer.borderWidth = 1
        contentView.layer.borderColor = UIColor.black.cgColor

        remainLabel.layer.borderWidth = 1
        remainLabel.layer.borderColor = UIColor.black.cgColor

        scrollView.contentSize = CGSize(width: view.frame.size.width * 3, height: scrollView.frame.size.height)
        scrollView.isPagingEnabled = true
        scrollView.showsHorizontalScrollIndicator = false
        view.layoutIfNeeded()

        let detailScrollView = UIScrollView(frame: CGRect(x: 0, y: 0, width: view.frame.size.width, height: scrollView.frame.size.height))
        let detailTextView = UITextView(frame: CGRect(x: 0, y: 0, width: view.frame.size.width, height: scrollView.frame.size.height))
        detailTextView.isEditable = false
        detailTextView.text = "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
        detailScrollView.contentSize = CGSize(width: view.frame.size.width, height: detailTextView.frame.size.height * 2)
        scrollView.addSubview(detailScrollView)
        detailScrollView.addSubview(detailTextView)

        let deliveringView = UIView(frame: CGRect(x: view.frame.size.width, y: 0, width: view.frame.size.width, height: scrollView.frame.size.height))
        deliveringView.backgroundColor = UIColor.blue
        scrollView.addSubview(deliveringView)

        let rankingView = UIView(frame: CGRect(x: view.frame.size.width * 2, y: 0, width: view.frame.size.width, height: scrollView.frame.size.height))
        rankingView.backgroundColor = UIColor.cyan
        scrollView.addSubview(rankingView)

    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }

    func back() {
        self.navigationController?.popViewController(animated: true)
    }
    @IBAction func actionDetail(_ sender: Any) {
        var frame = scrollView.bounds
        frame.origin.x = 0
        scrollView.scrollRectToVisible(frame, animated: true)
    }
    @IBAction func actionDelivering(_ sender: Any) {
        var frame = scrollView.bounds
        frame.origin.x = view.frame.size.width
        scrollView.scrollRectToVisible(frame, animated: true)
    }
    @IBAction func actionRanking(_ sender: Any) {
        var frame = scrollView.bounds
        frame.origin.x = view.frame.size.width * 2
        scrollView.scrollRectToVisible(frame, animated: true)
    }

}
